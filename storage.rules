rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions for security validation
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidCVFile() {
      return request.resource.size < 10 * 1024 * 1024 && // 10MB limit
        (request.resource.contentType == 'application/pdf' ||
         request.resource.contentType == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||
         request.resource.contentType == 'application/msword' ||
         request.resource.contentType == 'text/csv' ||
         request.resource.contentType == 'text/plain');
    }

    function isValidAudioFile() {
      return request.resource.size < 50 * 1024 * 1024 && // 50MB limit for audio
        (request.resource.contentType.matches('audio/.*') ||
         request.resource.contentType == 'audio/mpeg' ||
         request.resource.contentType == 'audio/mp3' ||
         request.resource.contentType == 'audio/wav');
    }


    function isValidImageFile() {
      return request.resource.size < 5 * 1024 * 1024 && // 5MB limit for images
        (request.resource.contentType.matches('image/.*') ||
         request.resource.contentType == 'image/jpeg' ||
         request.resource.contentType == 'image/png' ||
         request.resource.contentType == 'image/gif' ||
         request.resource.contentType == 'image/svg+xml');
    }

    // ========================================
    // CV UPLOAD STORAGE (T041-T042)
    // ========================================

    // CV file uploads with job structure
    match /users/{userId}/uploads/{jobId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidCVFile();
      allow delete: if isOwner(userId);
    }

    // Legacy CV upload structure (backward compatibility)
    match /users/{userId}/uploads/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidCVFile();
      allow delete: if isOwner(userId);
    }
    
    // ========================================
    // GENERATED CONTENT STORAGE (T043-T044)
    // ========================================

    // Generated CV files - users can read their own, functions write
    match /users/{userId}/generated/{jobId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only functions can write generated content
      allow delete: if isOwner(userId); // Users can clean up their generated content
    }

    // Generated processed CVs with different formats
    match /users/{userId}/processed-cvs/{jobId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only functions can write
      allow delete: if isOwner(userId);
    }

    // ========================================
    // PUBLIC PROFILE ASSETS (T047-T048)
    // ========================================

    // Public CV files for sharing - controlled by Firestore rules
    match /public/{profileId}/cv.html {
      allow read: if true; // Public access for sharing
      allow write: if false; // Only functions can write
    }

    // Public profile media assets
    match /public/{profileId}/media/{fileName} {
      allow read: if true; // Public access for profile viewing
      allow write: if false; // Only functions can write
    }

    // Public profile thumbnails and images
    match /public/{profileId}/images/{fileName} {
      allow read: if true; // Public access
      allow write: if false; // Only functions can write
    }

    // ========================================
    // MULTIMEDIA CONTENT STORAGE (T045-T046)
    // ========================================

    // Generated podcasts - users can access their own
    match /users/{userId}/podcasts/{jobId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only functions can write
      allow delete: if isOwner(userId);
    }

    // Generated videos - users can access their own
    match /users/{userId}/videos/{jobId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only functions can write
      allow delete: if isOwner(userId);
    }

    // Legacy podcast structure (backward compatibility)
    match /users/{userId}/podcasts/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only functions can write
    }

    // Legacy paths for backward compatibility - authenticated access only
    match /podcasts/{jobId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }

    match /videos/{jobId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }
    
    // ========================================
    // SUPPORTING ASSETS AND FILES
    // ========================================

    // QR codes for users - users can access their own
    match /users/{userId}/qr-codes/{jobId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only functions can write
      allow delete: if isOwner(userId);
    }

    // Calendar files for users - users can access their own
    match /users/{userId}/calendar/{jobId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only functions can write
      allow delete: if isOwner(userId);
    }

    // Profile images and avatars - users can upload their own
    match /users/{userId}/profile/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidImageFile();
      allow delete: if isOwner(userId);
    }

    // Document attachments for users
    match /users/{userId}/documents/{jobId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only functions can write processed documents
      allow delete: if isOwner(userId);
    }

    // ========================================
    // LEGACY PATHS (BACKWARD COMPATIBILITY)
    // ========================================

    // Legacy QR codes paths
    match /qr-codes/{jobId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }

    match /qrcodes/{jobId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }

    // Legacy calendar files
    match /calendar/{jobId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }

    // ========================================
    // TEMPORARY AND PROCESSING FILES
    // ========================================

    // Temporary merged audio files (processing artifacts)
    match /merged-audio/{tempId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }

    // Temporary processing files (auto-deleted after 24h)
    match /temp/{jobId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }

    // Temporary upload staging area
    match /staging/{userId}/{sessionId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) &&
        (isValidCVFile() || isValidImageFile() || isValidAudioFile());
      allow delete: if isOwner(userId);
    }

    // ========================================
    // PUBLIC AND TEMPLATE ASSETS
    // ========================================

    // Public template assets - read-only for all users
    match /templates/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Only functions can update templates
    }

    // Public system assets (logos, icons, etc.)
    match /assets/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Only functions can update assets
    }

    // Public shared resources
    match /shared/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Only functions can update shared resources
    }

    // ========================================
    // SECURITY: DEFAULT DENY RULE
    // ========================================

    // Default deny for any unspecified paths
    // This ensures security by default for any new storage paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}