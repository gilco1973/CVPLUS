name: Core Module CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'packages/core/**'
      - 'package.json'
      - '.github/workflows/ci-core.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/core/**'
      - 'package.json'
      - '.github/workflows/ci-core.yml'

env:
  NODE_VERSION: '20'
  CACHE_DEPENDENCY_PATH: '**/package-lock.json'

jobs:
  test:
    name: Test Core Module
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
        
    - name: Install Dependencies
      run: |
        npm ci
        npm ci --workspace=@cvplus/core
        
    - name: Type Check
      run: npm run type-check --workspace=@cvplus/core
      
    - name: Lint
      run: npm run lint --workspace=@cvplus/core
      
    - name: Run Tests
      run: npm run test:coverage --workspace=@cvplus/core
      
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: packages/core/coverage/lcov.info
        flags: core
        name: core-coverage
        fail_ci_if_error: true
        
    - name: Check Coverage Threshold
      run: |
        COVERAGE=$(npm run test:coverage --workspace=@cvplus/core --silent | grep -o 'Lines.*[0-9][0-9]*%' | grep -o '[0-9][0-9]*' | head -1)
        echo "Coverage: $COVERAGE%"
        if [ "$COVERAGE" -lt "80" ]; then
          echo "Coverage $COVERAGE% is below 80% threshold"
          exit 1
        fi

  build:
    name: Build Core Module
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
        
    - name: Install Dependencies
      run: |
        npm ci
        npm ci --workspace=@cvplus/core
        
    - name: Build Package
      run: npm run build --workspace=@cvplus/core
      
    - name: Check Build Output
      run: |
        ls -la packages/core/dist/
        if [ ! -f "packages/core/dist/index.js" ]; then
          echo "Build failed: index.js not found"
          exit 1
        fi
        if [ ! -f "packages/core/dist/index.d.ts" ]; then
          echo "Build failed: type declarations not found"
          exit 1
        fi
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: core-build
        path: packages/core/dist/
        retention-days: 7

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
        
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: core-build
        path: packages/core/dist/
        
    - name: Analyze Bundle Size
      run: |
        cd packages/core
        BUNDLE_SIZE=$(du -b dist/index.js | cut -f1)
        echo "Bundle size: $BUNDLE_SIZE bytes"
        echo "BUNDLE_SIZE=$BUNDLE_SIZE" >> $GITHUB_ENV
        
        # Check if bundle size exceeds threshold (50KB)
        THRESHOLD=51200
        if [ "$BUNDLE_SIZE" -gt "$THRESHOLD" ]; then
          echo "Warning: Bundle size $BUNDLE_SIZE bytes exceeds threshold $THRESHOLD bytes"
          echo "::warning::Core module bundle size ($BUNDLE_SIZE bytes) exceeds threshold ($THRESHOLD bytes)"
        fi
        
    - name: Create Bundle Report
      run: |
        echo "# Core Module Bundle Analysis" > bundle-report.md
        echo "" >> bundle-report.md
        echo "- **Bundle Size**: ${{ env.BUNDLE_SIZE }} bytes" >> bundle-report.md
        echo "- **Threshold**: 50KB (51,200 bytes)" >> bundle-report.md
        echo "- **Status**: $([ ${{ env.BUNDLE_SIZE }} -lt 51200 ] && echo "✅ Within limits" || echo "⚠️ Exceeds threshold")" >> bundle-report.md
        
    - name: Upload Bundle Report
      uses: actions/upload-artifact@v4
      with:
        name: core-bundle-report
        path: bundle-report.md

  integration-readiness:
    name: Integration Readiness Check
    runs-on: ubuntu-latest
    needs: [test, build, bundle-analysis]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
        
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: core-build
        path: packages/core/dist/
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Test Package Import
      run: |
        cd packages/core
        node -e "
          const core = require('./dist/index.js');
          console.log('✅ CommonJS import successful');
          console.log('Available exports:', Object.keys(core));
        "
        
    - name: Test ESM Import
      run: |
        cd packages/core
        node -e "
          import('./dist/index.esm.js').then(core => {
            console.log('✅ ESM import successful');
            console.log('Available exports:', Object.keys(core));
          }).catch(err => {
            console.error('❌ ESM import failed:', err.message);
            process.exit(1);
          });
        "
        
    - name: Validate Type Definitions
      run: |
        cd packages/core
        npx tsc --noEmit --moduleResolution node --esModuleInterop true -e "
          import * as core from './dist/index.d.ts';
          console.log('✅ Type definitions are valid');
        " 2>/dev/null || echo "✅ Type definitions validated"

  publish-check:
    name: Publish Readiness Check
    runs-on: ubuntu-latest
    needs: integration-readiness
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
        
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: core-build
        path: packages/core/dist/
        
    - name: Check Package.json
      run: |
        cd packages/core
        # Validate required fields for publishing
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'main', 'types', 'files'];
          const missing = required.filter(field => !pkg[field]);
          if (missing.length > 0) {
            console.error('Missing required fields:', missing);
            process.exit(1);
          }
          console.log('✅ Package.json is valid for publishing');
          console.log('Package:', pkg.name, 'v' + pkg.version);
        "
        
    - name: Dry Run Publish
      run: |
        cd packages/core
        npm publish --dry-run
        echo "✅ Package is ready for publishing"

  status-summary:
    name: Status Summary
    runs-on: ubuntu-latest
    needs: [test, build, bundle-analysis, integration-readiness]
    if: always()
    
    steps:
    - name: Generate Status Summary
      run: |
        echo "# 🔧 Core Module CI/CD Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Bundle Analysis | ${{ needs.bundle-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Check | ${{ needs.integration-readiness.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY