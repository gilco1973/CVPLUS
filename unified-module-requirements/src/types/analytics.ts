/**
 * Advanced Analytics and Insights Types
 *
 * Defines types for machine learning-based insights, trend analysis,
 * predictive modeling, and intelligent recommendations.
 */

import { ValidationResult } from './validation.js';
import { PerformanceProfile } from './performance.js';
import { SecurityScanResult } from './security.js';

/**
 * Analytics data point representing a single measurement
 */
export interface AnalyticsDataPoint {
  /** Timestamp of the measurement */
  timestamp: Date;
  /** Metric name */
  metric: string;
  /** Measured value */
  value: number;
  /** Additional metadata */
  metadata: Record<string, any>;
  /** Source module or component */
  source: string;
  /** Data point tags for categorization */
  tags: string[];
}

/**
 * Time series data collection
 */
export interface TimeSeries {
  /** Series identifier */
  id: string;
  /** Series name */
  name: string;
  /** Data points in chronological order */
  dataPoints: AnalyticsDataPoint[];
  /** Series metadata */
  metadata: {
    unit: string;
    description: string;
    category: string;
    frequency: 'real-time' | 'hourly' | 'daily' | 'weekly' | 'monthly';
  };
}

/**
 * Analytics configuration for data collection and processing
 */
export interface AnalyticsConfig {
  /** Data retention period in days */
  retentionDays: number;
  /** Sampling rate for metrics (0-1) */
  samplingRate: number;
  /** Enable machine learning features */
  enableML: boolean;
  /** Metrics to collect */
  metrics: AnalyticsMetricConfig[];
  /** Aggregation settings */
  aggregation: {
    intervals: ('1m' | '5m' | '15m' | '1h' | '6h' | '1d' | '1w')[];
    functions: ('avg' | 'min' | 'max' | 'sum' | 'count' | 'p50' | 'p95' | 'p99')[];
  };
  /** ML model configuration */
  mlConfig: {
    modelTypes: MLModelType[];
    trainingSchedule: 'continuous' | 'daily' | 'weekly';
    predictionHorizon: number; // days
    confidenceThreshold: number; // 0-1
  };
}

/**
 * Metric configuration for data collection
 */
export interface AnalyticsMetricConfig {
  /** Metric identifier */
  id: string;
  /** Metric name */
  name: string;
  /** Metric type */
  type: 'counter' | 'gauge' | 'histogram' | 'timer';
  /** Collection frequency */
  frequency: 'real-time' | 'periodic';
  /** Enable trend analysis */
  enableTrends: boolean;
  /** Enable anomaly detection */
  enableAnomalyDetection: boolean;
  /** Metric-specific configuration */
  config: Record<string, any>;
}

/**
 * Supported machine learning model types
 */
export type MLModelType =
  | 'trend_analysis'
  | 'anomaly_detection'
  | 'predictive_modeling'
  | 'clustering'
  | 'classification'
  | 'regression'
  | 'time_series_forecasting';

/**
 * Machine learning model metadata
 */
export interface MLModel {
  /** Model identifier */
  id: string;
  /** Model name */
  name: string;
  /** Model type */
  type: MLModelType;
  /** Model version */
  version: string;
  /** Training data period */
  trainingPeriod: {
    start: Date;
    end: Date;
  };
  /** Model performance metrics */
  performance: {
    accuracy?: number;
    precision?: number;
    recall?: number;
    f1Score?: number;
    rmse?: number;
    mae?: number;
  };
  /** Model configuration */
  config: Record<string, any>;
  /** Model status */
  status: 'training' | 'ready' | 'deployed' | 'deprecated';
  /** Training completion timestamp */
  trainedAt: Date;
  /** Last used timestamp */
  lastUsedAt?: Date;
}

/**
 * Insight generated by analytics system
 */
export interface Insight {
  /** Insight identifier */
  id: string;
  /** Insight type */
  type: InsightType;
  /** Insight title */
  title: string;
  /** Insight description */
  description: string;
  /** Insight severity/importance */
  severity: 'info' | 'low' | 'medium' | 'high' | 'critical';
  /** Confidence score (0-1) */
  confidence: number;
  /** Supporting data */
  data: {
    metrics: string[];
    timeRange: {
      start: Date;
      end: Date;
    };
    evidence: any[];
  };
  /** Recommended actions */
  recommendations: Recommendation[];
  /** Related insights */
  relatedInsights: string[];
  /** Insight generation timestamp */
  generatedAt: Date;
  /** Insight expiry (if applicable) */
  expiresAt?: Date;
}

/**
 * Types of insights that can be generated
 */
export type InsightType =
  | 'trend'
  | 'anomaly'
  | 'prediction'
  | 'performance_degradation'
  | 'security_risk'
  | 'optimization_opportunity'
  | 'quality_issue'
  | 'pattern_recognition'
  | 'correlation'
  | 'seasonal_pattern';

/**
 * Actionable recommendation based on insights
 */
export interface Recommendation {
  /** Recommendation identifier */
  id: string;
  /** Recommendation title */
  title: string;
  /** Detailed description */
  description: string;
  /** Priority level */
  priority: 'low' | 'medium' | 'high' | 'urgent';
  /** Estimated impact */
  impact: {
    performance?: string;
    security?: string;
    maintainability?: string;
    cost?: string;
  };
  /** Implementation effort */
  effort: 'low' | 'medium' | 'high';
  /** Implementation steps */
  steps: string[];
  /** Related metrics */
  metrics: string[];
  /** Expected outcome */
  expectedOutcome: string;
}

/**
 * Trend analysis result
 */
export interface TrendAnalysis {
  /** Metric being analyzed */
  metric: string;
  /** Time period analyzed */
  period: {
    start: Date;
    end: Date;
  };
  /** Trend direction */
  direction: 'increasing' | 'decreasing' | 'stable' | 'volatile';
  /** Trend strength (0-1) */
  strength: number;
  /** Statistical significance */
  significance: number;
  /** Trend slope (change per unit time) */
  slope: number;
  /** Seasonal patterns detected */
  seasonality: {
    detected: boolean;
    period?: number; // in days
    amplitude?: number;
  };
  /** Forecast for next period */
  forecast: {
    value: number;
    confidenceInterval: {
      lower: number;
      upper: number;
    };
    horizon: number; // days
  };
}

/**
 * Anomaly detection result
 */
export interface AnomalyDetection {
  /** Metric being analyzed */
  metric: string;
  /** Anomaly detection timestamp */
  timestamp: Date;
  /** Detected anomalies */
  anomalies: Anomaly[];
  /** Detection algorithm used */
  algorithm: 'statistical' | 'isolation_forest' | 'one_class_svm' | 'lstm' | 'ensemble';
  /** Model confidence in detection */
  confidence: number;
  /** Detection parameters */
  parameters: Record<string, any>;
}

/**
 * Individual anomaly instance
 */
export interface Anomaly {
  /** Anomaly identifier */
  id: string;
  /** Timestamp of anomalous data point */
  timestamp: Date;
  /** Observed value */
  observedValue: number;
  /** Expected value */
  expectedValue: number;
  /** Anomaly score (0-1) */
  score: number;
  /** Anomaly type */
  type: 'point' | 'contextual' | 'collective';
  /** Anomaly severity */
  severity: 'low' | 'medium' | 'high' | 'critical';
  /** Contributing factors */
  factors: string[];
  /** Potential causes */
  potentialCauses: string[];
}

/**
 * Predictive model forecast
 */
export interface Prediction {
  /** Metric being predicted */
  metric: string;
  /** Prediction timestamp */
  timestamp: Date;
  /** Forecast period */
  horizon: number; // days
  /** Predicted values */
  predictions: PredictionPoint[];
  /** Model used for prediction */
  modelId: string;
  /** Prediction confidence */
  confidence: number;
  /** Prediction accuracy (if historical data available) */
  accuracy?: number;
}

/**
 * Single prediction point
 */
export interface PredictionPoint {
  /** Future timestamp */
  timestamp: Date;
  /** Predicted value */
  value: number;
  /** Confidence interval */
  confidenceInterval: {
    lower: number;
    upper: number;
  };
  /** Contributing factors */
  factors: Record<string, number>;
}

/**
 * Pattern recognition result
 */
export interface PatternRecognition {
  /** Pattern identifier */
  id: string;
  /** Pattern name */
  name: string;
  /** Pattern type */
  type: 'recurring' | 'seasonal' | 'cyclic' | 'sporadic' | 'trending';
  /** Pattern description */
  description: string;
  /** Metrics involved in pattern */
  metrics: string[];
  /** Pattern occurrence frequency */
  frequency: {
    count: number;
    period: string; // e.g., "weekly", "monthly"
  };
  /** Pattern strength/reliability */
  strength: number;
  /** Pattern duration */
  duration: {
    average: number; // minutes/hours
    min: number;
    max: number;
  };
  /** Pattern characteristics */
  characteristics: Record<string, any>;
  /** Next expected occurrence */
  nextOccurrence?: Date;
}

/**
 * Correlation analysis result
 */
export interface CorrelationAnalysis {
  /** Primary metric */
  primaryMetric: string;
  /** Secondary metric */
  secondaryMetric: string;
  /** Correlation coefficient (-1 to 1) */
  coefficient: number;
  /** Correlation strength */
  strength: 'weak' | 'moderate' | 'strong' | 'very_strong';
  /** Statistical significance */
  significance: number;
  /** P-value */
  pValue: number;
  /** Time lag (if applicable) */
  lag?: number; // in time units
  /** Relationship type */
  relationship: 'linear' | 'non_linear' | 'none';
  /** Analysis period */
  period: {
    start: Date;
    end: Date;
  };
}

/**
 * Quality assessment metrics
 */
export interface QualityMetrics {
  /** Overall quality score (0-100) */
  overallScore: number;
  /** Individual quality dimensions */
  dimensions: {
    reliability: number;
    maintainability: number;
    security: number;
    performance: number;
    testability: number;
    documentation: number;
  };
  /** Quality trends */
  trends: {
    direction: 'improving' | 'declining' | 'stable';
    velocity: number; // points per time unit
  };
  /** Quality issues identified */
  issues: QualityIssue[];
  /** Benchmark comparison */
  benchmark: {
    industryAverage: number;
    bestPractice: number;
    percentile: number;
  };
}

/**
 * Quality issue identification
 */
export interface QualityIssue {
  /** Issue identifier */
  id: string;
  /** Issue type */
  type: 'code_smell' | 'anti_pattern' | 'violation' | 'debt' | 'risk';
  /** Issue severity */
  severity: 'low' | 'medium' | 'high' | 'critical';
  /** Issue title */
  title: string;
  /** Issue description */
  description: string;
  /** Affected components */
  components: string[];
  /** Impact assessment */
  impact: {
    performance?: string;
    maintainability?: string;
    security?: string;
    reliability?: string;
  };
  /** Remediation effort */
  effort: string;
  /** Recommended fixes */
  fixes: string[];
}

/**
 * Analytics dashboard configuration
 */
export interface DashboardConfig {
  /** Dashboard identifier */
  id: string;
  /** Dashboard name */
  name: string;
  /** Dashboard description */
  description: string;
  /** Dashboard widgets */
  widgets: DashboardWidget[];
  /** Refresh interval */
  refreshInterval: number; // seconds
  /** Dashboard layout */
  layout: {
    columns: number;
    rows: number;
  };
  /** Dashboard filters */
  filters: DashboardFilter[];
}

/**
 * Dashboard widget configuration
 */
export interface DashboardWidget {
  /** Widget identifier */
  id: string;
  /** Widget type */
  type: 'metric' | 'chart' | 'table' | 'insight' | 'alert' | 'trend';
  /** Widget title */
  title: string;
  /** Widget position */
  position: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
  /** Widget configuration */
  config: {
    metrics?: string[];
    timeRange?: string;
    chartType?: 'line' | 'bar' | 'pie' | 'area' | 'scatter';
    aggregation?: string;
    filters?: Record<string, any>;
  };
}

/**
 * Dashboard filter configuration
 */
export interface DashboardFilter {
  /** Filter identifier */
  id: string;
  /** Filter name */
  name: string;
  /** Filter type */
  type: 'time_range' | 'metric' | 'tag' | 'source' | 'custom';
  /** Filter options */
  options: any[];
  /** Default value */
  defaultValue?: any;
}

/**
 * Analytics export configuration
 */
export interface ExportConfig {
  /** Export format */
  format: 'json' | 'csv' | 'xlsx' | 'pdf' | 'html';
  /** Data to export */
  data: {
    metrics?: string[];
    insights?: string[];
    timeRange?: {
      start: Date;
      end: Date;
    };
    aggregation?: string;
  };
  /** Export options */
  options: {
    includeMetadata?: boolean;
    includeCharts?: boolean;
    includeRecommendations?: boolean;
    compression?: boolean;
  };
}

/**
 * Analytics processing job
 */
export interface AnalyticsJob {
  /** Job identifier */
  id: string;
  /** Job name */
  name: string;
  /** Job type */
  type: 'data_collection' | 'analysis' | 'model_training' | 'prediction' | 'export';
  /** Job status */
  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';
  /** Job parameters */
  parameters: Record<string, any>;
  /** Job progress */
  progress: {
    percentage: number;
    currentStep: string;
    totalSteps: number;
  };
  /** Job scheduling */
  schedule: {
    type: 'once' | 'periodic' | 'cron';
    expression?: string; // cron expression
    interval?: number; // seconds
  };
  /** Job timestamps */
  timestamps: {
    created: Date;
    started?: Date;
    completed?: Date;
    lastRun?: Date;
    nextRun?: Date;
  };
  /** Job results */
  results?: any;
  /** Job error information */
  error?: {
    message: string;
    stack?: string;
    code?: string;
  };
}

/**
 * Real-time analytics event
 */
export interface AnalyticsEvent {
  /** Event identifier */
  id: string;
  /** Event type */
  type: string;
  /** Event timestamp */
  timestamp: Date;
  /** Event source */
  source: string;
  /** Event data */
  data: Record<string, any>;
  /** Event tags */
  tags: string[];
  /** Event severity */
  severity: 'debug' | 'info' | 'warning' | 'error' | 'critical';
  /** Event processing status */
  processed: boolean;
}

/**
 * Analytics alert configuration
 */
export interface AlertConfig {
  /** Alert identifier */
  id: string;
  /** Alert name */
  name: string;
  /** Alert description */
  description: string;
  /** Alert condition */
  condition: {
    metric: string;
    operator: '>' | '<' | '>=' | '<=' | '==' | '!=' | 'contains' | 'matches';
    threshold: number | string;
    duration?: number; // seconds
  };
  /** Alert severity */
  severity: 'low' | 'medium' | 'high' | 'critical';
  /** Alert actions */
  actions: AlertAction[];
  /** Alert enabled status */
  enabled: boolean;
  /** Alert cooldown period */
  cooldown: number; // seconds
}

/**
 * Alert action configuration
 */
export interface AlertAction {
  /** Action type */
  type: 'email' | 'webhook' | 'slack' | 'log' | 'auto_fix';
  /** Action configuration */
  config: Record<string, any>;
  /** Action conditions */
  conditions?: Record<string, any>;
}

/**
 * Analytics service configuration
 */
export interface AnalyticsServiceConfig {
  /** Service settings */
  settings: AnalyticsConfig;
  /** Data storage configuration */
  storage: {
    type: 'memory' | 'file' | 'database' | 'time_series_db';
    config: Record<string, any>;
  };
  /** ML service configuration */
  mlService: {
    enabled: boolean;
    provider: 'builtin' | 'tensorflow' | 'pytorch' | 'scikit_learn' | 'cloud';
    config: Record<string, any>;
  };
  /** Alert configuration */
  alerts: AlertConfig[];
  /** Dashboard configuration */
  dashboards: DashboardConfig[];
}