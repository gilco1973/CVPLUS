import { onCall } from 'firebase-functions/v2/https';
import * as admin from 'firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';
import { CVParser } from '../services/cvParser';
import { PIIDetector } from '../services/piiDetector';
import { corsOptions } from '../config/cors';

export const processCV = onCall(
  {
    timeoutSeconds: 300,
    memory: '2GiB',
    ...corsOptions,
    // secrets: ['ANTHROPIC_API_KEY'] // Temporarily disabled
  },
  async (request) => {
    console.log('ProcessCV function called');
    console.log('Request auth:', request.auth ? 'Present' : 'Missing');
    console.log('Request data keys:', Object.keys(request.data || {}));
    
    // Check authentication
    if (!request.auth) {
      console.error('Authentication missing in processCV request');
      throw new Error('User must be authenticated to process CV');
    }

    console.log('User ID:', request.auth.uid);

    const { jobId, fileUrl, mimeType, isUrl } = request.data;
    
    console.log('ProcessCV parameters:', { 
      jobId: jobId || 'MISSING', 
      fileUrl: fileUrl ? (fileUrl.substring(0, 100) + '...') : 'MISSING',
      mimeType: mimeType || 'MISSING',
      isUrl: isUrl
    });

    if (!jobId || (!fileUrl && !isUrl)) {
      console.error('Missing required parameters:', { jobId, fileUrl: !!fileUrl, isUrl });
      throw new Error('Missing required parameters');
    }

    try {
      // Update job status
      await admin.firestore()
        .collection('jobs')
        .doc(jobId)
        .update({
          status: 'processing',
          updatedAt: FieldValue.serverTimestamp()
        });

      // Get job data to retrieve user instructions
      const jobDoc = await admin.firestore()
        .collection('jobs')
        .doc(jobId)
        .get();
      
      const jobData = jobDoc.data();
      const userInstructions = jobData?.userInstructions;

      // Initialize CV parser
      const apiKey = process.env.ANTHROPIC_API_KEY;
      if (!apiKey) {
        throw new Error('Anthropic API key not configured');
      }
      
      const parser = new CVParser(apiKey);
      let parsedCV;

      if (isUrl) {
        // Parse from URL
        parsedCV = await parser.parseFromURL(fileUrl, userInstructions);
      } else {
        // Download file from storage
        const bucket = admin.storage().bucket();
        
        // Extract the file path from the download URL
        // The URL format is: https://firebasestorage.googleapis.com/v0/b/{bucket}/o/{encoded-path}?alt=media&token=...
        const urlObj = new URL(fileUrl);
        const pathMatch = urlObj.pathname.match(/\/o\/(.+)$/);
        if (!pathMatch) {
          throw new Error('Invalid storage URL format');
        }
        
        // Decode the file path
        const filePath = decodeURIComponent(pathMatch[1]);
        console.log('Downloading file from path:', filePath);
        
        const file = bucket.file(filePath);
        const [buffer] = await file.download();
        
        // Parse the CV
        parsedCV = await parser.parseCV(buffer, mimeType, userInstructions);
      }

      // Detect PII
      const piiDetector = new PIIDetector(apiKey);
      const piiResult = await piiDetector.detectAndMaskPII(parsedCV);

      // Save parsed data with PII information
      await admin.firestore()
        .collection('jobs')
        .doc(jobId)
        .update({
          status: 'analyzed',
          parsedData: parsedCV,
          piiDetection: {
            hasPII: piiResult.hasPII,
            detectedTypes: piiResult.detectedTypes,
            recommendations: piiResult.recommendations
          },
          privacyVersion: piiResult.maskedData,
          updatedAt: FieldValue.serverTimestamp()
        });

      // Check if this is a quick create job
      // (we already have jobData from earlier)
      
      // If quick create, automatically generate CV
      if (jobData?.quickCreate || jobData?.settings?.applyAllEnhancements) {
        // Update status to generating
        await admin.firestore()
          .collection('jobs')
          .doc(jobId)
          .update({
            status: 'generating',
            updatedAt: FieldValue.serverTimestamp()
          });
        
        // For now, create a simple generated CV
        // TODO: Implement actual CV generation with templates
        const generatedCV = {
          html: `<html><body><h1>${parsedCV.personalInfo.name}</h1><p>Professional CV generated by CVPlus</p></body></html>`,
          pdfUrl: `https://storage.googleapis.com/cvplus.appspot.com/generated/${jobId}/cv.pdf`,
          docxUrl: `https://storage.googleapis.com/cvplus.appspot.com/generated/${jobId}/cv.docx`
        };
        
        // Update job to completed
        await admin.firestore()
          .collection('jobs')
          .doc(jobId)
          .update({
            status: 'completed',
            generatedCV,
            updatedAt: FieldValue.serverTimestamp()
          });
      }

      return {
        success: true,
        jobId,
        parsedData: parsedCV
      };

    } catch (error: any) {
      console.error('Error processing CV:', error);
      
      // Determine error type and provide appropriate user message
      let userMessage = error.message;
      let errorType = 'unknown';
      
      if (error.message.includes('credit balance is too low') || error.message.includes('billing issues')) {
        errorType = 'billing';
        userMessage = 'The AI service is temporarily unavailable due to billing issues. Please try again later or contact support.';
      } else if (error.message.includes('Authentication failed')) {
        errorType = 'auth';
        userMessage = 'Authentication failed with the AI service. Please try again later or contact support.';
      } else if (error.message.includes('overloaded') || error.message.includes('429')) {
        errorType = 'rate_limit';
        userMessage = 'The AI service is currently overloaded. Please try again in a few moments.';
      } else if (error.message.includes('service is temporarily')) {
        errorType = 'service_unavailable';
        userMessage = 'The AI service is temporarily experiencing issues. Please try again later.';
      }
      
      // Update job status to failed with detailed error info
      await admin.firestore()
        .collection('jobs')
        .doc(jobId)
        .update({
          status: 'failed',
          error: userMessage,
          errorType: errorType,
          technicalError: error.message, // Keep original error for debugging
          updatedAt: FieldValue.serverTimestamp()
        });

      throw new Error(userMessage);
    }
  });