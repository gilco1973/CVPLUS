rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser(userId) {
      return isAuthenticated() && request.auth.uid == userId && userId != null && userId != '';
    }
    
    function isPremiumUser() {
      // SECURITY: Validate actual premium subscription status
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)).data.subscriptionStatus == 'premium_active' ||
              get(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)).data.subscriptionStatus == 'premium_lifetime' ||
              get(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)).data.lifetimeAccess == true);
    }
    
    function hasValidPremiumSubscription() {
      // Additional validation for subscription integrity
      let subscription = get(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)).data;
      return subscription != null &&
             subscription.userId == request.auth.uid &&
             (subscription.lifetimeAccess == true || 
              subscription.subscriptionStatus in ['premium_active', 'premium_lifetime']) &&
             (!exists(subscription.expiresAt) || subscription.expiresAt > request.time);
    }
    
    function hasFeatureAccess(feature) {
      // Validate specific feature access with integrity checks
      return isPremiumUser() && 
             hasValidPremiumSubscription() &&
             exists(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)/features/$(feature)) &&
             get(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)/features/$(feature)).data.enabled == true &&
             (!exists(get(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)/features/$(feature)).data.validUntil) ||
              get(/databases/$(database)/documents/userSubscriptions/$(request.auth.uid)/features/$(feature)).data.validUntil > request.time);
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.role == 'admin';
    }
    
    function isFunctionCall() {
      // Functions have special admin privileges
      return request.auth != null && 
             request.auth.uid.matches('.*-firebase-adminsdk-.*');
    }
    
    // Helper function to validate subscription write operations
    function isValidSubscriptionWrite() {
      return isFunctionCall() && 
             request.resource.data.keys().hasAll(['subscriptionStatus', 'lifetimeAccess', 'features']);
    }
    
    // Helper function to validate usage tracking data
    function isValidUsageTracking() {
      return request.resource.data.keys().hasAll(['userId', 'timestamp', 'success']) &&
             request.resource.data.userId == request.auth.uid;
    }

    // ========================================
    // USER DATA COLLECTIONS
    // ========================================
    
    // Allow authenticated users to read their own documents
    match /users/{userId}/{document=**} {
      allow read, write: if isValidUser(userId);
    }
    
    // User Verified Names - users can read/write their own
    match /userVerifiedNames/{userId} {
      allow read, write: if isValidUser(userId);
    }

    // ========================================
    // PREMIUM SUBSCRIPTION COLLECTIONS  
    // ========================================
    
    // User subscriptions - CRITICAL SECURITY: Users can only read their own, only functions can write
    match /userSubscriptions/{userId} {
      allow read: if isValidUser(userId);
      allow write: if isFunctionCall() && isValidSubscriptionWrite();
      
      // Feature access validation subcollection
      match /features/{feature} {
        allow read: if isValidUser(userId);
        allow write: if isFunctionCall();
      }
      
      // Usage tracking subcollection  
      match /usage/{feature} {
        allow read: if isValidUser(userId);
        allow create, update: if isValidUser(userId) && isValidUsageTracking();
        allow delete: if false; // Never allow deletion of usage data
      }
    }
    
    // Payment History - CRITICAL SECURITY: Users can only read their own, only functions can write
    match /paymentHistory/{paymentId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      allow write: if isFunctionCall() && 
                      request.resource.data.userId is string;
      allow delete: if false; // Never allow deletion of payment records
    }
    
    // Usage Tracking Collections - External Data Premium Features
    match /external_data_usage/{usageId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      allow write: if isFunctionCall() || 
                      (isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       isValidUsageTracking());
      allow delete: if false; // Preserve usage data for analytics
    }
    
    match /external_data_analytics/{analyticsId} {
      allow read: if isAdmin(); // Only admins can read aggregated analytics
      allow write: if isFunctionCall(); // Only functions can write analytics
      allow delete: if false; // Preserve analytics data
    }
    
    match /external_data_security_audit/{auditId} {
      allow read: if isAdmin(); // Only admins can read security audits
      allow write: if isFunctionCall(); // Only functions can write audit logs
      allow delete: if false; // Never delete security audit logs
    }

    // ========================================
    // CV AND JOB MANAGEMENT
    // ========================================
    
    // Jobs collection with premium feature validation
    match /jobs/{jobId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         resource.data.isPublic == true);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Generated CVs - users can manage their own
    match /generatedCVs/{cvId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // CV Hash Records - functions only (for duplicate detection)
    match /cvHashRecords/{hashId} {
      allow read: if false;
      allow write: if isFunctionCall();
    }

    // ========================================
    // ROLE PROFILES AND ANALYTICS
    // ========================================
    
    // Role profiles - read-only for authenticated users, write from functions only
    match /roleProfiles/{roleId} {
      allow read: if isAuthenticated();
      allow write: if isFunctionCall();
    }
    
    // User role profile assignments - authenticated users can manage their own
    match /userRoleProfiles/{userId} {
      allow read, write: if isValidUser(userId);
    }
    
    // Role profile analytics - functions only
    match /roleProfileAnalytics/{document=**} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }

    // ========================================
    // POLICY AND COMPLIANCE
    // ========================================
    
    // Policy configuration - admin read, functions write
    match /policy_config/{configId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }
    
    // User Policy Records - users can read their own, functions can write
    match /userPolicyRecords/{userId} {
      allow read: if isValidUser(userId);
      allow write: if isFunctionCall();
      
      // Policy check history - users can read their own
      match /checkHistory/{checkId} {
        allow read: if isValidUser(userId);
        allow write: if isFunctionCall();
      }
      
      // Upload history - users can read their own
      match /uploadHistory/{uploadId} {
        allow read: if isValidUser(userId);
        allow write: if isFunctionCall();
      }
    }
    
    // Policy Violations - admin/functions only
    match /policyViolations/{violationId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }

    // ========================================
    // ANALYTICS AND REVENUE DATA
    // ========================================
    
    // Analytics - admin read, functions write
    match /analytics/{document=**} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }
    
    // Revenue analytics and conversion tracking - admin/functions only
    match /conversionMetrics/{metricId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }
    
    match /revenueAnalytics/{analyticsId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }
    
    // Feature usage analytics for business intelligence
    match /featureUsageAnalytics/{usageId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }

    // ========================================
    // PUBLIC AND READ-ONLY DATA
    // ========================================
    
    // Allow reading public templates
    match /templates/{templateId} {
      allow read: if true;
      allow write: if isFunctionCall(); // Only functions can update templates
    }

    // ========================================
    // RATE LIMITING AND QUOTAS
    // ========================================
    
    // Rate limiting tracking - users can read their own, functions manage
    match /rateLimits/{userId} {
      allow read: if isValidUser(userId);
      allow write: if isFunctionCall();
      
      match /hourly/{timestamp} {
        allow read: if isValidUser(userId);
        allow write: if isFunctionCall() || 
                       (isValidUser(userId) && 
                        request.resource.data.count <= 100); // Hourly limit
      }
      
      match /daily/{timestamp} {
        allow read: if isValidUser(userId);
        allow write: if isFunctionCall() ||
                       (isValidUser(userId) && 
                        request.resource.data.count <= 500); // Daily limit
      }
    }

    // ========================================
    // PREMIUM FEATURE QUOTAS
    // ========================================
    
    // Premium feature quotas - functions manage, users can read their own
    match /premiumQuotas/{userId} {
      allow read: if isValidUser(userId);
      allow write: if isFunctionCall();
      
      // Individual feature quotas
      match /features/{featureId} {
        allow read: if isValidUser(userId);
        allow write: if isFunctionCall();
      }
    }
    
    // ========================================
    // PREMIUM SECURITY AUDIT LOGGING
    // ========================================
    
    // Premium access attempts - log all access attempts for security monitoring
    match /premiumAccessAudit/{auditId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
      allow delete: if false; // Never delete security audit logs
    }
    
    // Suspicious premium activity tracking
    match /suspiciousActivity/{activityId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
      allow delete: if false; // Preserve security data
    }
    
    // Premium feature usage violations
    match /premiumViolations/{violationId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
      allow delete: if false; // Preserve violation data
    }

    // ========================================
    // ADMIN AND SUPPORT COLLECTIONS
    // ========================================
    
    // Support tickets - users can manage their own, admins can read all
    match /supportTickets/{ticketId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.userId || isAdmin());
      allow delete: if isAdmin();
    }
    
    // System health monitoring - admin only
    match /systemHealth/{healthId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }
    
    // Audit logs - admin read only, functions write
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow write: if isFunctionCall();
    }

    // ========================================
    // EMERGENCY ACCESS PATTERNS
    // ========================================
    
    // Emergency access for critical system maintenance
    match /emergency/{document=**} {
      allow read, write: if isAdmin();
    }

    // ========================================
    // FALLBACK RULE - DENY ALL UNLISTED ACCESS
    // ========================================
    
    // Default deny for any unspecified collections
    // This ensures security by default for any new collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}