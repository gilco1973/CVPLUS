const fs = require('fs');
const path = require('path');
const CVPlusContextManager = require('./context-manager');
const CVPlusPerformanceMonitor = require('./performance-monitor');

class CVPlusContextWorkflows {
    constructor() {
        this.projectRoot = '/Users/gklainert/Documents/cvplus';
        this.systemPath = path.join(this.projectRoot, 'context-system');
        this.contextManager = new CVPlusContextManager();
        this.performanceMonitor = new CVPlusPerformanceMonitor();
        
        this.workflows = {
            'feature-development': this.featureDevelopmentWorkflow.bind(this),
            'bug-investigation': this.bugInvestigationWorkflow.bind(this),
            'code-review': this.codeReviewWorkflow.bind(this),
            'architecture-planning': this.architecturePlanningWorkflow.bind(this),
            'deployment-preparation': this.deploymentPreparationWorkflow.bind(this),
            'documentation-update': this.documentationUpdateWorkflow.bind(this),
            'performance-optimization': this.performanceOptimizationWorkflow.bind(this),
            'security-audit': this.securityAuditWorkflow.bind(this)
        };
    }

    async executeWorkflow(workflowName, context = {}) {
        console.log(`üöÄ Executing CVPlus workflow: ${workflowName}`);
        
        const opId = this.performanceMonitor.startOperation('workflow-execution', `${workflowName} workflow`);
        
        try {
            if (!this.workflows[workflowName]) {
                throw new Error(`Unknown workflow: ${workflowName}`);
            }

            const result = await this.workflows[workflowName](context);
            
            this.performanceMonitor.endOperation(opId, 'success', {
                workflow: workflowName,
                contextFiles: result.contextFiles?.length || 0
            });
            
            return result;
        } catch (error) {
            this.performanceMonitor.endOperation(opId, 'error', { error: error.message });
            throw error;
        }
    }

    async featureDevelopmentWorkflow(context) {
        console.log('üîß Feature Development Workflow');
        
        const { featureName, componentType = 'unknown', priority = 'medium' } = context;
        
        // Step 1: Gather related files
        const contextQuery = `implement ${featureName} ${componentType} feature`;
        const optimizedContext = await this.contextManager.getOptimizedContextForTask(contextQuery, 40);
        
        // Step 2: Include relevant patterns and templates
        const templateFiles = await this.findTemplateFiles(componentType);
        const testFiles = await this.findRelatedTestFiles(featureName);
        const configFiles = await this.getConfigurationFiles();
        
        // Step 3: Add architecture documentation
        const architectureContext = await this.getArchitecturalContext([
            'docs/architecture/',
            'docs/plans/',
            'docs/design/'
        ]);

        // Step 4: Create development checklist
        const checklist = this.createFeatureDevelopmentChecklist(featureName, componentType);
        
        return {
            workflow: 'feature-development',
            context: {
                featureName,
                componentType,
                priority
            },
            contextFiles: [
                ...optimizedContext.contextFiles,
                ...templateFiles,
                ...testFiles,
                ...configFiles,
                ...architectureContext
            ],
            checklist,
            recommendations: await this.getFeatureDevelopmentRecommendations(context),
            estimatedEffort: this.estimateFeatureDevelopmentEffort(componentType, priority)
        };
    }

    async bugInvestigationWorkflow(context) {
        console.log('üêõ Bug Investigation Workflow');
        
        const { bugDescription, errorMessage, affectedComponents = [], severity = 'medium' } = context;
        
        // Step 1: Context for debugging
        const contextQuery = `debug ${bugDescription} ${errorMessage}`;
        const optimizedContext = await this.contextManager.getOptimizedContextForTask(contextQuery, 30);
        
        // Step 2: Find error logs and related files
        const logFiles = await this.findLogFiles();
        const errorPatternFiles = await this.findFilesWithErrorPatterns(errorMessage);
        
        // Step 3: Get related component files
        const componentFiles = await this.getComponentFiles(affectedComponents);
        
        // Step 4: Include debugging documentation
        const debugDocs = await this.getDebuggingDocumentation();
        
        // Step 5: Create investigation checklist
        const checklist = this.createBugInvestigationChecklist(bugDescription, severity);
        
        return {
            workflow: 'bug-investigation',
            context: {
                bugDescription,
                errorMessage,
                affectedComponents,
                severity
            },
            contextFiles: [
                ...optimizedContext.contextFiles,
                ...logFiles,
                ...errorPatternFiles,
                ...componentFiles,
                ...debugDocs
            ],
            checklist,
            investigationSteps: this.generateInvestigationSteps(context),
            potentialCauses: this.analyzePotentialCauses(errorMessage, affectedComponents)
        };
    }

    async codeReviewWorkflow(context) {
        console.log('üëÄ Code Review Workflow');
        
        const { changedFiles = [], pullRequestDescription, author } = context;
        
        // Step 1: Focus on changed files and their dependencies
        const contextQuery = `code review ${changedFiles.join(' ')} ${pullRequestDescription}`;
        const optimizedContext = await this.contextManager.getOptimizedContextForTask(contextQuery, 35);
        
        // Step 2: Get related files (imports, tests, documentation)
        const relatedFiles = await this.findRelatedFiles(changedFiles);
        const testFiles = await this.findTestsForFiles(changedFiles);
        
        // Step 3: Include coding standards and guidelines
        const standardsFiles = await this.getCodingStandards();
        
        // Step 4: Security and performance considerations
        const securityDocs = await this.getSecurityGuidelines();
        
        // Step 5: Create review checklist
        const checklist = this.createCodeReviewChecklist();
        
        return {
            workflow: 'code-review',
            context: {
                changedFiles,
                pullRequestDescription,
                author
            },
            contextFiles: [
                ...optimizedContext.contextFiles,
                ...relatedFiles,
                ...testFiles,
                ...standardsFiles,
                ...securityDocs
            ],
            checklist,
            reviewFocus: this.generateReviewFocus(changedFiles),
            qualityGates: this.getQualityGates()
        };
    }

    async architecturePlanningWorkflow(context) {
        console.log('üèóÔ∏è Architecture Planning Workflow');
        
        const { planScope, requirements = [], constraints = [] } = context;
        
        // Step 1: Gather architectural context
        const contextQuery = `architecture plan ${planScope} ${requirements.join(' ')}`;
        const optimizedContext = await this.contextManager.getOptimizedContextForTask(contextQuery, 50);
        
        // Step 2: Include existing architecture documentation
        const architectureDocs = await this.getArchitecturalContext([
            'docs/architecture/',
            'docs/system/',
            'docs/design/'
        ]);
        
        // Step 3: Technical specifications
        const techSpecs = await this.getTechnicalSpecifications();
        
        // Step 4: Best practices and patterns
        const patterns = await this.getArchitecturalPatterns();
        
        return {
            workflow: 'architecture-planning',
            context: {
                planScope,
                requirements,
                constraints
            },
            contextFiles: [
                ...optimizedContext.contextFiles,
                ...architectureDocs,
                ...techSpecs,
                ...patterns
            ],
            planningTemplate: this.getArchitecturePlanningTemplate(),
            considerationPoints: this.getArchitecturalConsiderations(requirements, constraints)
        };
    }

    async deploymentPreparationWorkflow(context) {
        console.log('üöÄ Deployment Preparation Workflow');
        
        const { environment = 'production', deploymentType = 'full', hotfixes = [] } = context;
        
        // Step 1: Deployment-specific context
        const contextQuery = `deployment ${environment} ${deploymentType}`;
        const optimizedContext = await this.contextManager.getOptimizedContextForTask(contextQuery, 30);
        
        // Step 2: Configuration files
        const configFiles = await this.getDeploymentConfigurations(environment);
        
        // Step 3: Scripts and automation
        const deploymentScripts = await this.getDeploymentScripts();
        
        // Step 4: Rollback procedures
        const rollbackDocs = await this.getRollbackDocumentation();
        
        // Step 5: Monitoring and validation
        const monitoringDocs = await this.getMonitoringDocumentation();
        
        return {
            workflow: 'deployment-preparation',
            context: {
                environment,
                deploymentType,
                hotfixes
            },
            contextFiles: [
                ...optimizedContext.contextFiles,
                ...configFiles,
                ...deploymentScripts,
                ...rollbackDocs,
                ...monitoringDocs
            ],
            preDeploymentChecklist: this.createDeploymentChecklist(environment),
            validationSteps: this.getDeploymentValidationSteps(environment),
            rollbackPlan: this.createRollbackPlan(environment)
        };
    }

    async documentationUpdateWorkflow(context) {
        console.log('üìö Documentation Update Workflow');
        
        const { documentationType, targetFiles = [], updateScope = 'comprehensive' } = context;
        
        // Step 1: Documentation-focused context
        const contextQuery = `documentation update ${documentationType} ${updateScope}`;
        const optimizedContext = await this.contextManager.getOptimizedContextForTask(contextQuery, 45);
        
        // Step 2: Related documentation files
        const relatedDocs = await this.getRelatedDocumentation(documentationType);
        
        // Step 3: Code files that need documentation
        const codeFiles = await this.getUndocumentedCodeFiles();
        
        // Step 4: Documentation templates and standards
        const templates = await this.getDocumentationTemplates();
        
        return {
            workflow: 'documentation-update',
            context: {
                documentationType,
                targetFiles,
                updateScope
            },
            contextFiles: [
                ...optimizedContext.contextFiles,
                ...relatedDocs,
                ...codeFiles,
                ...templates
            ],
            documentationPlan: this.createDocumentationPlan(documentationType, updateScope),
            qualityStandards: this.getDocumentationQualityStandards()
        };
    }

    async performanceOptimizationWorkflow(context) {
        console.log('‚ö° Performance Optimization Workflow');
        
        const { optimizationType = 'general', targetMetrics = [], bottlenecks = [] } = context;
        
        // Step 1: Performance-focused context
        const contextQuery = `performance optimization ${optimizationType} ${bottlenecks.join(' ')}`;
        const optimizedContext = await this.contextManager.getOptimizedContextForTask(contextQuery, 35);
        
        // Step 2: Performance analysis files
        const performanceFiles = await this.getPerformanceAnalysisFiles();
        
        // Step 3: Optimization patterns
        const optimizationPatterns = await this.getOptimizationPatterns();
        
        // Step 4: Monitoring and metrics
        const metricsFiles = await this.getMetricsFiles();
        
        return {
            workflow: 'performance-optimization',
            context: {
                optimizationType,
                targetMetrics,
                bottlenecks
            },
            contextFiles: [
                ...optimizedContext.contextFiles,
                ...performanceFiles,
                ...optimizationPatterns,
                ...metricsFiles
            ],
            optimizationPlan: this.createOptimizationPlan(optimizationType, bottlenecks),
            benchmarkingStrategy: this.getBenchmarkingStrategy()
        };
    }

    async securityAuditWorkflow(context) {
        console.log('üîí Security Audit Workflow');
        
        const { auditScope = 'comprehensive', riskLevel = 'medium', components = [] } = context;
        
        // Step 1: Security-focused context
        const contextQuery = `security audit ${auditScope} ${riskLevel}`;
        const optimizedContext = await this.contextManager.getOptimizedContextForTask(contextQuery, 40);
        
        // Step 2: Security documentation
        const securityDocs = await this.getSecurityDocumentation();
        
        // Step 3: Configuration files
        const securityConfigs = await this.getSecurityConfigurations();
        
        // Step 4: Authentication and authorization files
        const authFiles = await this.getAuthenticationFiles();
        
        return {
            workflow: 'security-audit',
            context: {
                auditScope,
                riskLevel,
                components
            },
            contextFiles: [
                ...optimizedContext.contextFiles,
                ...securityDocs,
                ...securityConfigs,
                ...authFiles
            ],
            auditChecklist: this.createSecurityAuditChecklist(auditScope),
            securityStandards: this.getSecurityStandards(),
            complianceRequirements: this.getComplianceRequirements()
        };
    }

    // Helper methods for file discovery
    async findTemplateFiles(componentType) {
        // Implementation would search for template files based on component type
        return [{ path: 'templates/component-template.tsx', tier: 'contextual', priority: 80 }];
    }

    async findRelatedTestFiles(featureName) {
        // Implementation would find test files related to the feature
        return [{ path: `tests/${featureName}.test.ts`, tier: 'contextual', priority: 75 }];
    }

    async getConfigurationFiles() {
        // Implementation would gather relevant configuration files
        return [
            { path: 'package.json', tier: 'critical', priority: 90 },
            { path: 'tsconfig.json', tier: 'critical', priority: 85 },
            { path: 'firebase.json', tier: 'critical', priority: 85 }
        ];
    }

    async getArchitecturalContext(directories) {
        // Implementation would gather architecture documentation from specified directories
        return [
            { path: 'docs/architecture/SYSTEM_DESIGN.md', tier: 'contextual', priority: 85 },
            { path: 'docs/plans/current-implementation-plan.md', tier: 'contextual', priority: 80 }
        ];
    }

    // Checklist creators
    createFeatureDevelopmentChecklist(featureName, componentType) {
        return [
            '‚òê Review existing similar components and patterns',
            '‚òê Create component structure and interfaces',
            '‚òê Implement core functionality with proper TypeScript types',
            '‚òê Add comprehensive unit tests',
            '‚òê Update relevant documentation',
            '‚òê Perform self-code review',
            '‚òê Test integration with existing features',
            '‚òê Update CHANGELOG and version if applicable'
        ];
    }

    createBugInvestigationChecklist(bugDescription, severity) {
        return [
            '‚òê Reproduce the bug consistently',
            '‚òê Analyze error logs and stack traces',
            '‚òê Identify root cause through code analysis',
            '‚òê Assess impact and affected systems',
            '‚òê Create fix with proper testing',
            '‚òê Verify fix doesn\'t introduce regressions',
            '‚òê Update documentation if behavior changed',
            '‚òê Plan deployment strategy based on severity'
        ];
    }

    createCodeReviewChecklist() {
        return [
            '‚òê Code follows project style guidelines',
            '‚òê All functions have proper TypeScript types',
            '‚òê No security vulnerabilities introduced',
            '‚òê Performance implications considered',
            '‚òê Error handling is comprehensive',
            '‚òê Tests cover new functionality',
            '‚òê Documentation updated where needed',
            '‚òê No debugging code or console.logs left'
        ];
    }

    createDeploymentChecklist(environment) {
        return [
            '‚òê All tests pass in CI/CD pipeline',
            '‚òê Database migrations are ready (if applicable)',
            '‚òê Environment variables are configured',
            '‚òê Backup strategy is in place',
            '‚òê Rollback plan is documented and tested',
            '‚òê Monitoring and alerts are configured',
            '‚òê Performance benchmarks established',
            '‚òê Security configurations validated'
        ];
    }

    createSecurityAuditChecklist(auditScope) {
        return [
            '‚òê Authentication mechanisms reviewed',
            '‚òê Authorization controls validated',
            '‚òê Input validation and sanitization checked',
            '‚òê Sensitive data handling reviewed',
            '‚òê API security assessed',
            '‚òê Dependencies scanned for vulnerabilities',
            '‚òê Configuration security validated',
            '‚òê Compliance requirements verified'
        ];
    }

    // Estimation and planning helpers
    estimateFeatureDevelopmentEffort(componentType, priority) {
        const baseHours = {
            'component': 8,
            'service': 12,
            'page': 16,
            'api': 10,
            'integration': 20
        };
        
        const priorityMultiplier = {
            'low': 1.0,
            'medium': 1.2,
            'high': 1.5,
            'critical': 2.0
        };
        
        const base = baseHours[componentType] || 10;
        const multiplier = priorityMultiplier[priority] || 1.2;
        
        return Math.round(base * multiplier);
    }

    // Placeholder methods for various file discovery functions
    async findLogFiles() { return []; }
    async findFilesWithErrorPatterns(errorMessage) { return []; }
    async getComponentFiles(components) { return []; }
    async getDebuggingDocumentation() { return []; }
    async findRelatedFiles(files) { return []; }
    async findTestsForFiles(files) { return []; }
    async getCodingStandards() { return []; }
    async getSecurityGuidelines() { return []; }
    async getTechnicalSpecifications() { return []; }
    async getArchitecturalPatterns() { return []; }
    async getDeploymentConfigurations(env) { return []; }
    async getDeploymentScripts() { return []; }
    async getRollbackDocumentation() { return []; }
    async getMonitoringDocumentation() { return []; }
    async getRelatedDocumentation(type) { return []; }
    async getUndocumentedCodeFiles() { return []; }
    async getDocumentationTemplates() { return []; }
    async getPerformanceAnalysisFiles() { return []; }
    async getOptimizationPatterns() { return []; }
    async getMetricsFiles() { return []; }
    async getSecurityDocumentation() { return []; }
    async getSecurityConfigurations() { return []; }
    async getAuthenticationFiles() { return []; }

    generateInvestigationSteps(context) { return []; }
    analyzePotentialCauses(error, components) { return []; }
    generateReviewFocus(files) { return []; }
    getQualityGates() { return []; }
    getArchitecturePlanningTemplate() { return {}; }
    getArchitecturalConsiderations(req, constraints) { return []; }
    getDeploymentValidationSteps(env) { return []; }
    createRollbackPlan(env) { return {}; }
    createDocumentationPlan(type, scope) { return {}; }
    getDocumentationQualityStandards() { return []; }
    createOptimizationPlan(type, bottlenecks) { return {}; }
    getBenchmarkingStrategy() { return {}; }
    getSecurityStandards() { return []; }
    getComplianceRequirements() { return []; }
    getFeatureDevelopmentRecommendations(context) { return []; }

    // Workflow management
    listAvailableWorkflows() {
        return Object.keys(this.workflows).map(name => ({
            name,
            description: this.getWorkflowDescription(name)
        }));
    }

    getWorkflowDescription(workflowName) {
        const descriptions = {
            'feature-development': 'Comprehensive context for implementing new features',
            'bug-investigation': 'Focused context for debugging and resolving issues',
            'code-review': 'Context for thorough code review and quality assurance',
            'architecture-planning': 'Strategic context for system design and architecture',
            'deployment-preparation': 'Context for safe and reliable deployments',
            'documentation-update': 'Context for maintaining comprehensive documentation',
            'performance-optimization': 'Context for analyzing and improving performance',
            'security-audit': 'Context for security assessment and compliance'
        };
        
        return descriptions[workflowName] || 'Custom workflow';
    }
}

module.exports = CVPlusContextWorkflows;

// Demo if run directly
if (require.main === module) {
    const workflows = new CVPlusContextWorkflows();
    
    async function runDemo() {
        console.log('üîÑ CVPlus Context Workflows Demo\n');
        
        // List available workflows
        console.log('Available Workflows:');
        const availableWorkflows = workflows.listAvailableWorkflows();
        availableWorkflows.forEach((wf, i) => {
            console.log(`   ${i+1}. ${wf.name}: ${wf.description}`);
        });
        
        // Execute sample workflows
        console.log('\n' + '='.repeat(60));
        
        try {
            const featureResult = await workflows.executeWorkflow('feature-development', {
                featureName: 'UserProfileEditor',
                componentType: 'component',
                priority: 'high'
            });
            
            console.log(`\n‚úÖ Feature Development Workflow Complete`);
            console.log(`   Context Files: ${featureResult.contextFiles.length}`);
            console.log(`   Estimated Effort: ${featureResult.estimatedEffort} hours`);
            console.log(`   Checklist Items: ${featureResult.checklist.length}`);
            
        } catch (error) {
            console.error('‚ùå Workflow execution error:', error.message);
        }
    }
    
    runDemo().catch(console.error);
}