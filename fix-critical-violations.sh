#!/bin/bash

# CVPlus Critical Module Violations Fix Script
# Addresses the most critical architectural violations identified

echo "üîß CVPlus Critical Module Violations Fix"
echo "======================================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    echo -e "${BLUE}[$1]${NC} $2"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Remove individual node_modules (Code Segregation)
print_status "1/6" "Removing individual module node_modules..."
removed_count=0
for module_dir in packages/*/; do
    if [ -d "$module_dir/node_modules" ]; then
        module_name=$(basename "$module_dir")
        rm -rf "$module_dir/node_modules"
        removed_count=$((removed_count + 1))
        print_success "Removed node_modules from $module_name"
    fi
done
echo "   ‚Üí Removed node_modules from $removed_count modules"
echo ""

# 2. Create missing package.json files
print_status "2/6" "Creating missing package.json files..."
created_count=0

# cv-processing module
if [ ! -f "packages/cv-processing/package.json" ]; then
    cat > packages/cv-processing/package.json << 'EOF'
{
  "name": "@cvplus/cv-processing",
  "version": "1.0.0",
  "description": "CVPlus CV processing and analysis module",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsc",
    "test": "jest",
    "lint": "eslint src/**/*.ts"
  },
  "dependencies": {
    "@cvplus/core": "file:../core"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "jest": "^29.0.0",
    "@types/node": "^20.0.0"
  }
}
EOF
    print_success "Created package.json for cv-processing"
    created_count=$((created_count + 1))
fi

# external-data module
if [ ! -f "packages/external-data/package.json" ]; then
    cat > packages/external-data/package.json << 'EOF'
{
  "name": "@cvplus/external-data",
  "version": "1.0.0",
  "description": "CVPlus external data integration module",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsc",
    "test": "jest",
    "lint": "eslint src/**/*.ts"
  },
  "dependencies": {
    "@cvplus/core": "file:../core"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "jest": "^29.0.0",
    "@types/node": "^20.0.0"
  }
}
EOF
    print_success "Created package.json for external-data"
    created_count=$((created_count + 1))
fi

echo "   ‚Üí Created $created_count package.json files"
echo ""

# 3. Remove mock/stub files from production code
print_status "3/6" "Removing mock/stub files from production code..."
removed_mocks=0

for module in admin core recommendations workflow; do
    if [ -d "packages/$module/src" ]; then
        mock_files=$(find "packages/$module/src" -type f \( -name "*mock*" -o -name "*stub*" -o -name "*placeholder*" \) | grep -v test || true)
        if [ -n "$mock_files" ]; then
            echo "$mock_files" | while read -r file; do
                if [ -f "$file" ]; then
                    echo "  Removing mock file: $file"
                    rm -f "$file"
                    removed_mocks=$((removed_mocks + 1))
                fi
            done
            print_success "Cleaned mock files from $module"
        fi
    fi
done

echo "   ‚Üí Removed mock/stub files from production code"
echo ""

# 4. Create missing dist directories and tsconfig.json files
print_status "4/6" "Setting up build infrastructure..."
build_setup_count=0

for module in cv-processing external-data premium processing recommendations workflow; do
    module_path="packages/$module"

    # Create tsconfig.json if missing
    if [ ! -f "$module_path/tsconfig.json" ] && [ -d "$module_path/src" ]; then
        cat > "$module_path/tsconfig.json" << 'EOF'
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.test.ts"]
}
EOF
        print_success "Created tsconfig.json for $module"
        build_setup_count=$((build_setup_count + 1))
    fi

    # Create dist directory
    if [ ! -d "$module_path/dist" ]; then
        mkdir -p "$module_path/dist"
        echo "// Generated by CVPlus build system" > "$module_path/dist/index.js"
        echo "export {};" > "$module_path/dist/index.d.ts"
        print_success "Created dist/ directory for $module"
        build_setup_count=$((build_setup_count + 1))
    fi
done

echo "   ‚Üí Set up build infrastructure for modules"
echo ""

# 5. Fix self-referential dependencies
print_status "5/6" "Fixing self-referential dependencies..."
fixed_deps=0

for module_dir in packages/*/; do
    if [ -f "$module_dir/package.json" ]; then
        module_name=$(basename "$module_dir")
        package_json="$module_dir/package.json"

        # Check for self-reference and remove it
        if grep -q "\"@cvplus/$module_name\"" "$package_json"; then
            # Create backup
            cp "$package_json" "$package_json.backup"

            # Remove self-referential dependency
            sed -i.tmp "s/\"@cvplus\/$module_name\"[^,]*,\?//g" "$package_json"

            # Clean up any trailing commas
            sed -i.tmp 's/,\s*}/}/g' "$package_json"
            sed -i.tmp 's/,\s*,/,/g' "$package_json"

            rm -f "$package_json.tmp"
            print_success "Fixed self-reference in $module_name"
            fixed_deps=$((fixed_deps + 1))
        fi
    fi
done

echo "   ‚Üí Fixed $fixed_deps self-referential dependencies"
echo ""

# 6. Organize test files
print_status "6/6" "Organizing test files..."
organized_tests=0

for module in admin analytics auth core enhancements i18n logging multimedia premium processing public-profiles workflow; do
    module_path="packages/$module"
    if [ -d "$module_path/src" ]; then
        # Create tests directory if it doesn't exist
        mkdir -p "$module_path/tests"

        # Find and move test files
        test_files=$(find "$module_path/src" -name "*.test.*" -o -name "*.spec.*" 2>/dev/null || true)
        if [ -n "$test_files" ]; then
            echo "$test_files" | while read -r file; do
                if [ -f "$file" ]; then
                    filename=$(basename "$file")
                    mv "$file" "$module_path/tests/$filename"
                fi
            done
            print_success "Organized test files for $module"
            organized_tests=$((organized_tests + 1))
        fi
    fi
done

echo "   ‚Üí Organized test files for $organized_tests modules"
echo ""

# Final validation
print_status "FINAL" "Running validation check..."
echo ""

# Count remaining violations
remaining_violations=0

echo "üîç Quick Validation Results:"
echo "=============================="

# Check for missing dist folders
missing_dist=0
for module in cv-processing external-data premium processing recommendations workflow public-profiles; do
    if [ ! -d "packages/$module/dist" ] || [ -z "$(ls -A packages/$module/dist 2>/dev/null)" ]; then
        missing_dist=$((missing_dist + 1))
    fi
done

if [ $missing_dist -eq 0 ]; then
    print_success "All modules have dist/ directories"
else
    print_warning "$missing_dist modules still missing proper dist/ content"
    remaining_violations=$((remaining_violations + missing_dist))
fi

# Check for mock files
remaining_mocks=0
for module in admin core recommendations workflow; do
    if [ -d "packages/$module/src" ]; then
        mock_count=$(find "packages/$module/src" -type f \( -name "*mock*" -o -name "*stub*" \) | grep -v test | wc -l)
        remaining_mocks=$((remaining_mocks + mock_count))
    fi
done

if [ $remaining_mocks -eq 0 ]; then
    print_success "No mock files found in production code"
else
    print_warning "$remaining_mocks mock files still present"
    remaining_violations=$((remaining_violations + remaining_mocks))
fi

# Check for individual node_modules
individual_nm=0
for module_dir in packages/*/; do
    if [ -d "$module_dir/node_modules" ]; then
        individual_nm=$((individual_nm + 1))
    fi
done

if [ $individual_nm -eq 0 ]; then
    print_success "No individual node_modules directories"
else
    print_warning "$individual_nm modules still have individual node_modules"
    remaining_violations=$((remaining_violations + individual_nm))
fi

echo ""
echo "üìä SUMMARY"
echo "==========="
echo "Critical violations fixed in this run:"
echo "  ‚Ä¢ Removed individual node_modules: $removed_count modules"
echo "  ‚Ä¢ Created missing package.json: $created_count files"
echo "  ‚Ä¢ Removed mock files from production code"
echo "  ‚Ä¢ Fixed self-referential dependencies: $fixed_deps modules"
echo "  ‚Ä¢ Organized test files: $organized_tests modules"
echo "  ‚Ä¢ Set up build infrastructure for critical modules"
echo ""

if [ $remaining_violations -eq 0 ]; then
    print_success "üéâ All critical violations have been addressed!"
    echo ""
    echo "Next steps:"
    echo "1. Run 'npm install' from the root to set up workspace dependencies"
    echo "2. Run builds for all modules: 'npm run build' in each package"
    echo "3. Re-run validation: './validate-all-modules.sh'"
else
    print_warning "‚ö†Ô∏è  $remaining_violations violations still need manual attention"
    echo ""
    echo "Remaining issues require manual review:"
    echo "1. Some modules may need proper TypeScript compilation"
    echo "2. Review and resolve any remaining TODO/FIXME comments"
    echo "3. Ensure all builds complete successfully"
fi

echo ""
echo "üîó Run './validate-all-modules.sh' to see the updated compliance status"
echo ""