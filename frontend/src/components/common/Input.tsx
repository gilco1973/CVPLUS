import React, { forwardRef } from 'react';\nimport { LucideIcon } from 'lucide-react';\nimport { designSystem } from '../../config/designSystem';\n\ninterface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  label?: string;\n  error?: string;\n  helperText?: string;\n  icon?: LucideIcon;\n  iconPosition?: 'left' | 'right';\n  variant?: 'default' | 'error';\n  fullWidth?: boolean;\n}\n\nexport const Input = forwardRef<HTMLInputElement, InputProps>((\n  {\n    label,\n    error,\n    helperText,\n    icon: Icon,\n    iconPosition = 'left',\n    variant = 'default',\n    fullWidth = true,\n    className = '',\n    id,\n    ...props\n  },\n  ref\n) => {\n  const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;\n  const hasError = Boolean(error);\n  const currentVariant = hasError ? 'error' : variant;\n  \n  // Get classes from design system\n  const baseClasses = designSystem.components.form.input.base;\n  const focusClasses = currentVariant === 'error' \n    ? designSystem.components.form.input.error \n    : designSystem.components.form.input.focus;\n  const disabledClasses = props.disabled ? designSystem.components.form.input.disabled : '';\n  \n  return (\n    <div className={`${fullWidth ? 'w-full' : ''}`}>\n      {/* Label */}\n      {label && (\n        <label \n          htmlFor={inputId}\n          className={designSystem.components.form.label}\n        >\n          {label}\n        </label>\n      )}\n      \n      {/* Input Container */}\n      <div className=\"relative\">\n        {/* Left Icon */}\n        {Icon && iconPosition === 'left' && (\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <Icon className=\"h-5 w-5 text-neutral-400\" aria-hidden=\"true\" />\n          </div>\n        )}\n        \n        {/* Input Field */}\n        <input\n          ref={ref}\n          id={inputId}\n          className={`\n            ${baseClasses}\n            ${focusClasses}\n            ${disabledClasses}\n            ${Icon && iconPosition === 'left' ? 'pl-10' : ''}\n            ${Icon && iconPosition === 'right' ? 'pr-10' : ''}\n            ${hasError ? 'border-error-500' : ''}\n            ${className}\n          `.trim()}\n          aria-invalid={hasError}\n          aria-describedby={\n            error ? `${inputId}-error` : \n            helperText ? `${inputId}-helper` : undefined\n          }\n          {...props}\n        />\n        \n        {/* Right Icon */}\n        {Icon && iconPosition === 'right' && (\n          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n            <Icon className=\"h-5 w-5 text-neutral-400\" aria-hidden=\"true\" />\n          </div>\n        )}\n      </div>\n      \n      {/* Error Message */}\n      {error && (\n        <p \n          id={`${inputId}-error`}\n          className=\"mt-1 text-sm text-error-400\"\n          role=\"alert\"\n        >\n          {error}\n        </p>\n      )}\n      \n      {/* Helper Text */}\n      {helperText && !error && (\n        <p \n          id={`${inputId}-helper`}\n          className=\"mt-1 text-sm text-neutral-500\"\n        >\n          {helperText}\n        </p>\n      )}\n    </div>\n  );\n});\n\nInput.displayName = 'Input';\n\n// Export as default\nexport default Input;